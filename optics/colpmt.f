      program colpmt
*      IMPLICIT NONE
      PARAMETER (NWPAWC = 300000)
      PARAMETER (LRECL  = 1024)
      PARAMETER (id = 1)
      COMMON /PAWC/ IPAW(NWPAWC)

      character CHTOP*8, CHFILE*32
      character*80 chtitl
      
      character c
*
*     Store in Ntuple:
*     iref     - flag hit to reflector
*     ireg     - flag hit to PM
*     part(6)  - vector of incident particle
*     ray0(6)  - vector of initial photon
*     ray(6)   - vector of photon after the reflector
*     xypmt(2) - x,y coordinates of intersection with PM in PM system
*
      character*32 thisf,thisn,ifile,bfile, afile

      character ufun*8
      data ufun/'ufun'/

      data CHTOP /'NTDIR'/
      data CHFILE/' '/
      data afile /'unknown'/

      call GETARG(0,thisf)
      call FPARSE(thisf,thisn,thisf,'x')
      lename = LENOCC(thisn)
      CHFILE = 'ref.hbook'
      ifile  = thisn(1:lename)//'.f'
*
*     Ntuple
*      
      CALL HLIMIT(NWPAWC)
*     .. open an exist RZ file in update mode
      ntlun = LUNFREE(1)
      CALL HROPEN(ntlun,CHTOP,CHFILE,'U',LRECL,ISTAT)
      call HRIN(id,9999,0)
      call collect(id)
      call WAIT('Print NT and close the file')
      CALL HPRNT(id)
*
*-- write batch version of analisys routine to file
*
      lenufun = LENOCC(ufun)
      lunb = LUNFREE(1)
      OPEN(lunb, FILE=ufun(1:lenufun)//'.for', STATUS='UNKNOWN')
      CALL HUWFUN(lunb, id, ufun(1:lenufun), 0, 'B')
      close(lunb)
*
*-- write batch version of analisys routine to file
*
      lunb = LUNFREE(1)
      OPEN(lunb, FILE=ufun(1:lenufun)//'paw.for', STATUS='UNKNOWN')
      CALL HUWFUN(lunb, id, ufun(1:lenufun)//'paw', 0, 'P')
      close(lunb)

      CALL HROUT(0,ICYCLE,' ')
      call HREND(CHTOP)
      END
      
      
      SUBROUTINE collect(id)
*********************************************************
*                                                       *
* This file was generated by HUWFUN.                    *
*                                                       *
*********************************************************
*
*     N-tuple Id:     1    
*     N-tuple Title:  Spherical mirror + plane reflector
*     Creation:       04/09/98 05.27.01
*
*********************************************************
*
      REAL part,ray0,tst,ray
      INTEGER iref,ip
      COMMON /OPTIC/ iref,ip,part(6),ray0(6),tst(6),ray(6)

      common /COL/ ireg,intref,raycap(6),raypmt(6)
*
      character*8 var(2)
*
      real raylab(6),rayloc(6),rayref(6)
      parameter (MAXRAY=100)
      real rayhis(6,MAXRAY+1)
      
      real syscol(5),syspmt(5), systst(5)
*
      CALL HBNAME(id,' ',0,'$CLEAR')
      CALL HBNAME(id,'OPTIC',iref,'$SET')
*
*--   Enter user code here
*

      call HBNAME(id,'COL', ireg, 'ireg[0,1]:I, intref[0,10]:I,
     &            raycap(6):R, raypmt(6):R')

      Rbox = 30.
      Dbox = 500.
      Rpmt = 2.5

*     .. collector
      Rcol1 = Rpmt
      Rcol2 = 12.
*     .. cone height
      dhcol = 60.
      print*, 'Current Rcol2,dhcol:', Rcol2,dhcol
      print*, 'Enter you settings (''/''=untouched)'
      read *, Rcol2,dhcol
      print*, 'Calculate for Rcol2,dhcol:', Rcol2,dhcol

      call CONEpar(Rcol1,Rcol2,dhcol, tgcone,h1col,h2col)
*     .. col frame
      iaxis = 3
      thcol = -90.
      zcol = Dbox
      xcol = Rbox + h2col
      call mkframe(iaxis,thcol,zcol,xcol, syscol)

*     .. cap plane
      Rtst = 2.*Rbox
      iaxis = 3
      thtst = -90.
      ztst = Dbox
      xtst = Rbox
      call mkframe(iaxis,thtst,ztst,xtst, systst)

*     .. PM
*     .. pmt frame
      iaxis = 3
      thpmt = -90.
      zpmt = Dbox
      xpmt = Rbox + (h2col-h1col)
      call mkframe(iaxis,thpmt,zpmt,xpmt, syspmt)
      
*      print*, ' '
      print*, 'Distance to PM is', xpmt, ' cm from counter axis'

*     .. get number of entries
      call HNOENT(id, NLOOP)
*
*     .. read only the two desired columns
      var(1) = 'IREF'
      var(2) = 'RAY'
*
      ncol = 0

      nref = 0
      npmt = 0
      call HGNTV(id,var,2,1,ier)
      print*, 'Total photons', NLOOP
*-- DO
      DO 1000 nphot=1, NLOOP
      if (nphot.NE.1) call HGNTF(id,nphot,ier)
*     .. clear registration flag      
      ireg = 0
      intref = 0
      do i=1,6
         raypmt(i) = 2.*Rpmt
         raycap(i) = 4.*Rbox
      enddo
      if (ier.NE.0) then
         print*, 'Error reading row', nphot
         goto 2000
      endif
*     .. process only reflected photons
      if (iref.EQ.0) goto 2000
      nref = nref+1
*
*     Run ray
*

*     .. look at cap plane
      call toloc(systst,ray,rayloc)
      iertst = MIRCIR(Rtst,rayloc,raycap)
      if (iertst.NE.0) then
*        .. lost ray
         print*, 'Error in hit of cap plane'
      endif

*--   Reflection from collector
*     .. ray in collector local frame
      nray = 1
      call toloc(syscol,ray,rayhis(1,nray))
      irest = MAXRAY-nray
      call CONE(tgcone,h1col,h2col,irest,rayhis(1,nray),npro,iercol)
*     .. return to lab
      if (iercol.EQ.0) ncol=ncol+1
      intref = npro
      do i=nray,nray+npro
         call tolab(syscol,rayhis(1,i),rayhis(1,i))
      enddo
      nray = nray+npro
      if (iercol.GT.0) then
*        .. absorbed at the collector. Next photon
         goto 2000
      endif

*--   Intersection with PM
*     .. ray in PM local frame
      call toloc(syspmt,rayhis(1,nray),rayloc)
      call PMT(Rpmt,rayloc, raypmt,ierpmt)
      if (ierpmt.GE.0) then
**        .. return to lab output ray
*         call tolab(syspmt,rayref,raylab)
   
         if (ierpmt.EQ.0) then
*           .. absorbed at the PMT.
      	    ireg = 1
      	    npmt = npmt+1
          else
*     	    .. lost
             print*, 'Ray is absorbed at PM back'
         endif
      endif

 2000 continue
*     .. store raw
      call HFNTB(id,'COL')
      
*     .. for the next photon
      call imess('processed photons ', nphot)
*      if (MOD(nphot,10000).EQ.0) then
*          print*, 'processed', nphot, ' photons from', NLOOP
*      endif
 1000 ENDDO
*-- ENDDO

*     .. Summary

      effcol = 100.*REAL(npmt)/REAL(nref)
      effreg = 100.*REAL(npmt)/REAL(NLOOP)
      print*, ' '
      print*, 'Hit PM', npmt, ' photons from', nref, ' reflected'
      print*, 'Hit PM', npmt, ' photons from', NLOOP, ' emitted'
      print*, 'Collection   efficiency is', effcol, '%'
      print*, 'Registration efficiency is', effreg, '%'
      print*, '--------------------------------------'
      print*, 'cone reflected', ncol, ' rays'
      END
