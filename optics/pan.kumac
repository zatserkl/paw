MACRO PAN
win 24 22
set gsiz .35
set csiz .30

exec for

hname=''
g/imp hname
if [hname]='' then
   hname = center
   read hname 'Enter hname'
   g/cr hname [hname]
endif

cut $1 ip=0
a/cr -c hplot     'exec '//$WORD([0],1,1,#)#hplot
a/cr -c hcop      'exec '//$WORD([0],1,1,#)#hcop
a/cr -c GNU       'exec '//$WORD([0],1,1,#)#GNU

a/cr -c elec      'cut $1 ip=0'
a/cr -c pion      'cut $1 ip=1'
a/cr -c lakey     'mess ---last key was $LAST---'
a/cr -c hname     'g/cr hname'
a/cr -c fopen     'exec '//$WORD([0],1,1,#)#fopen
a/cr -c fclose    'close 1; TITLE '' '''
a/cr -c mir       'nt/pl 1.raymir(5)%raymir(6) $1'
a/cr -c mir1      'nt/pl 1.raymir(5)%raymir(6) $1.and.ireg=1'
a/cr -c mir0      'nt/pl 1.raymir(5)%raymir(6) $1.and.ireg=0'
a/cr -c tst       'nt/pl 1.raytst(5)%raytst(6) $1'
a/cr -c tst1      'nt/pl 1.raytst(5)%raytst(6) $1.and.ireg=1'
a/cr -c tst0      'nt/pl 1.raytst(5)%raytst(6) $1.and.ireg=0'
a/cr -c cap       'nt/pl 1.raycap(5)%raycap(6) $1'
a/cr -c cap1      'nt/pl 1.raycap(5)%raycap(6) $1.and.ireg=1'
a/cr -c cap0      'nt/pl 1.raycap(5)%raycap(6) $1.and.ireg=0'
a/cr -c pmt       'nt/pl 1.raypmt(5)%raypmt(6) $1.and.ireg=1'
a/cr -c intref    'nt/pl 1.intref $1'
a/cr -c intref1   'nt/pl 1.intref $1.and.ireg=1'
a/cr -c intref0   'nt/pl 1.intref $1.and.ireg=0'
a/cr -c RvsZ      'exec '//$WORD([0],1,1,#)#RvsZ
a/cr -c RvsZpl    'exec '//$WORD([0],1,1,#)#RvsZplot
clr
panel 0
panel 1 'setfile-' 'fopen' 'fclose' 'hplot-' 'hcop-' 'pion' 'elec'
panel 2 'mir' 'mir1' 'mir0' 'tst' 'tst1' 'tst0' 'cap' 'cap1' 'cap0'
panel 3 'intref' 'intref1' 'intref0' 'pmt'
panel 4 'ed pan' 'x pan' 'opt grid' 'lastkey' 'win-' 'sh' 'edit-' 'x-' '$; wait' 'me'
panel 5 'alp' 'set-' 'GNU-' 'RvsZ' 'RvsZpl'
*style gps ! ! .12
*style gp ! ! .12
*style gp ! ! 0.10
*style gp ! ! 0.07 0.001
style gps ! 0.90 0.03 0.001
RETURN

*                                         @METAGS fopen
*--------------- fopen ---------------
*
MACRO fopen
hname=''
g/imp hname
if [hname]='' then
   hname = center
   read hname 'Enter hname'
   g/cr hname [hname]
endif

h/file 1 [hname].hbook
nt/pri 1
uwfun 1 include.inc
exec RvsZfor
wait
call GTITNT(1)
RETURN

*                                         @METAGS hplot
*--------------- hplot ---------------
*
MACRO hplot id=1000000 opt
h/pl [id] [opt]
RETURN

*                                         @METAGS hcop
*--------------- hcop ---------------
*
MACRO hcop id2 tit id1=1000000
if [id2]='' then
   mess Usage: [0] id2 tit id1=1000000
   wait
   stopm
endif
h/cop [id1] [id2] [tit]
RETURN

*                                         @METAGS GNU
*--------------- GNU ---------------
*
MACRO GNU name
g/imp hname
if [name]='' then; name=[hname]; endif
sx [hname]
wait
RETURN

*                                         @METAGS RvsZ
*--------------- RvsZ ---------------
*
MACRO RvsZ dz=50
mess Working..
exec for

ntot = 20
sigma z     = array([ntot])*0
sigma rmean = array([ntot])*0
sigma rrms  = array([ntot])*0
z = 5
do i=1,[ntot]
   nt/pl 1.RvsZ([z]) $1
   v/inp z([i]) [z]
   v/inp rmean([i]) $HINFO(1000000,'MEAN')
   v/inp rrms([i])  $HINFO(1000000,'RMS')
   z = [z]+[dz]
enddo
mess --- OK ---
*mess plot
*wait
exec RvsZplot
RETURN

*                                         @METAGS RvsZplot
*--------------- RvsZplot ---------------
*
MACRO RvsZplot
if $VEXIST(z)=0 then; mess No vector z in memory!; stopm; endif
if $VEXIST(rmean)=0 then; mess No vector rmean in memory!; stopm; endif
if $VEXIST(rrms)=0  then; mess No vector rrms  in memory!; stopm; endif
zmax = 1.10*$SIGMA(VMAX(z))
vmax = 1.10*$SIGMA(VMAX(rmean))
null 0 [zmax] 0 [vmax]
mtyp0 = $GRAFINFO('?mtyp')
set mtyp 20
graph $VLEN(z) z rmean sp
set mtyp 24
graph $VLEN(z) z rrms  sp
atitle 'z, cm' 'MEAN and RMS, cm'
set mtyp [mtyp0]
SELNT 1
key 10 17 20 'MEAN'
key 10 16 24 'RMS'
SELNT 10
RETURN

*                                         @METAGS RvsZfor
*--------------- RvsZfor ---------------
*
MACRO RvsZfor
APPL COMIS QUIT
      REAL FUNCTION RvsZ(z)
      include 'include.inc'
*
*--   Enter user code here
*
      real systst(5)
      real raylab(6),rayloc(6),rayref(6)

*     .. test plane
      Rtst = 100.
      iaxis = 3
      thtst = 180.
      ztst = z
      xtst = 0.
      call mkframe(iaxis,thtst,ztst,xtst, systst)

*     .. look at test plane
      call toloc(systst,raymir,rayloc)
*     .. use routine PMT for hit test plane
      call PMT(Rtst,rayloc,rayref,iertst)
*      call tolab(systst,rayloc,raylab)
      if (iertst.NE.0) then
*        .. lost ray
         call WAIT('Error in hit of test plane')
      endif

      RvsZ = sqrt(rayref(5)**2 + rayref(6)**2)
      END
QUIT
RETURN

*
*
*
MACRO W
   mess $KEYVAL
   *last = $LAST
   *style C
   *exec [last]
   *style GP
RETURN

*                                         @METAGS for
*--------------- for ---------------
*
MACRO for
APPL COMIS QUIT
*                                         @METAGS GTITNT
*                                         09-20-98 09:26pm
*--------------- GTITNT ---------------
*
      SUBROUTINE GTITNT(id)
      IMPLICIT NONE
      integer id,IDIM,NVAR
      parameter (IDIM=100)
      character*8 CHTAG(IDIM)
      real RLOW(IDIM), RHIGH(IDIM)
      character*80 CHTITL, GTITLE
      NVAR = IDIM
      CHTITL = ' '
      GTITLE = ' '
      call HGIVEN(id,CHTITL,NVAR,CHTAG,RLOW,RHIGH)
      if (NVAR.EQ.0) then
         print*, 'Unknown Ntuple ID=', id, ' NVAR =', NVAR
         goto 1000
      endif
*      print*, GTITLE
*      print*, CHTAG
      GTITLE = CHTITL
 1000 call HTITLE(GTITLE)
      END

*                                         @METAGS PMT
*                                         07-08-98 10:10pm
*--------------- PMT ---------------
*
      SUBROUTINE PMT(Rpmt,ray,ray1,ierr)
      IMPLICIT NONE
      real Rpmt,ray(6),ray1(6)
      integer ierr
      real t
      integer i

      do i=1,6
         ray1(i) = ray(i)
      enddo
*
*     Intersection point of line and plane z=0
*     Line: direcrix cosines ray(3) and point aray(3)
*     Solve system of linear equations:
*     Ray: dir.cosines=(cosz,cosx,cosy), point aray=(z0,x0,y0)
*     eq.: (x-x0)/cosx = (y-y0)/cosy = (z-z0)/cosz
*     Plane: z=0
*
      if (ray(1) .NE. 0.) then
         t = -ray(4)/ray(1)
      else
*        .. ray is parallel to PM plane
         goto 1001
      endif
*      print*, 'PMT: t=', t
      if (t .LT. 0.) then
*        .. ray have missed the plane
         goto 1001
      endif

*     .. intersection point ray1(3+i) = ray(3+i) + ray(i)*t
      ray1(5) = ray(5) + ray(2)*t
      ray1(6) = ray(6) + ray(3)*t
*     .. z precisely on plane
      ray1(4) = 0.

*     .. test to hit
      if (ray1(5)**2 + ray1(6)**2 .GT. Rpmt**2) then
*        .. miss
         goto 1001
      endif

*     .. hit the PM
      ierr = 0
      goto 1000
*      RETURN
 1001 continue
*     .. ray have missed the PM
      ierr = -1
      goto 1000
*      RETURN
 1002 continue
*     .. ray is absorbed at the back side of PM
      ierr = 1
      goto 1000
*      RETURN
 1000 continue
*      print*, 'PMT: ray,ray1:'
*      print*, ray
*      print*, ray1
      RETURN
      END

*                                         @METAGS mkframe
*                                         03/07/98 10:11
*--------------- mkframe ---------------
*
      SUBROUTINE mkframe(iaxis,thdeg,d1,d2,frame)
      real thdeg,d1,d2,frame(5)
      double precision pi,torad,thrad
      pi = ACOS(-1.d0)
      torad = pi/180.d0
      thrad = thdeg*torad
      frame(1) = iaxis
      frame(2) = COS(thrad)
      frame(3) = SIN(thrad)
      frame(4) = d1
      frame(5) = d2
      END

*                                         @METAGS toloc
*                                         16/06/98 09:40
*--------------- toloc ---------------
*
      SUBROUTINE toloc(frame,raylab, rayloc)
*
*     Rotate the right coord. system round the INT(axis3) axis.
*     frame = (axis3,cosA,sinA,d1,d2)
*     d1 - shift along the axis1
*     d2 - shift along the axis2
*
      real frame(5),raylab(6),rayloc(6),c(6),x(6)
      i3 = frame(1)
      if (i3.EQ.3) then
         i1 = 1
         i2 = 2
      elseif (i3.EQ.1) then
         i1 = 2
         i2 = 3
      elseif (i3.EQ.2) then
         i1 = 3
         i2 = 1
      else
         print*, 'ERROR toloc: Wrong axis number in frame(1):', frame(1)
         STOP
      endif

      do i=1,3
         c(i) = raylab(i)
         x(i) = raylab(3+i)
      enddo
*     .. directrix cosines
      rayloc(i1) =  c(i1)*frame(2) + c(i2)*frame(3)
      rayloc(i2) = -c(i1)*frame(3) + c(i2)*frame(2)
      rayloc(i3) =  c(i3)
*     .. point
      rayloc(3+i1)=  (x(i1)-frame(4))*frame(2)+(x(i2)-frame(5))*frame(3)
      rayloc(3+i2)= -(x(i1)-frame(4))*frame(3)+(x(i2)-frame(5))*frame(2)
      rayloc(3+i3)=  x(i3)
      END

*                                         @METAGS tolab
*                                         16/06/98 09:40
*--------------- tolab ---------------
*
      SUBROUTINE tolab(frame,rayloc, raylab)
*
*     Rotate the right coord. system round the INT(axis3) axis.
*     frame = (axis3,cosA,sinA,d1,d2)
*     d1 - shift along the axis1
*     d2 - shift along the axis2
*
      real frame(5),rayloc(6),raylab(6),c(6),x(6)
      i3 = frame(1)
      if (i3.EQ.3) then
         i1 = 1
         i2 = 2
      elseif (i3.EQ.1) then
         i1 = 2
         i2 = 3
      elseif (i3.EQ.2) then
         i1 = 3
         i2 = 1
      else
         print*, 'ERROR tolab: Wrong axis number in frame(1):', frame(1)
         STOP
      endif

      do i=1,3
         c(i) = rayloc(i)
         x(i) = rayloc(3+i)
      enddo
*     .. directrix cosines
      raylab(i1) = c(i1)*frame(2) - c(i2)*frame(3)
      raylab(i2) = c(i1)*frame(3) + c(i2)*frame(2)
      raylab(i3) = c(i3)
*     .. point
      raylab(3+i1) = x(i1)*frame(2) - x(i2)*frame(3) + frame(4)
      raylab(3+i2) = x(i1)*frame(3) + x(i2)*frame(2) + frame(5)
      raylab(3+i3) = x(i3)
      END
QUIT
RETURN
