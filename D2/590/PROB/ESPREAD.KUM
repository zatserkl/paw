*                                         @METAGS Espread
*--------------- Espread ---------------
*
MACRO Espread np=10000 bt=.01 E0=.590 id=10
if [1]='' .OR. $UPPER([1])='HELP' then
   mess Usage:    [0] np=1000 bt=.01 E0=.590
   stopm
endif

exec for

sigma vE=array([np])*0
call fillE($RSIGMA([E0]),$RSIGMA([bt]),[np],vE)
v/pl vE
if $HEXIST([id]) then; h/de [id]; endif
tit = E0=[E0], bt=[bt]
h/cop 12345 [id] [tit]
h/pl [id]
RETURN

*                                         @METAGS for
*--------------- for ---------------
*
MACRO for
APPL COMIS QUIT
*                                         @METAGS fillE
*                                         01-15-99 10:45am
*--------------- fillE ---------------
*
      SUBROUTINE fillE(E0,bt,np,E)
      IMPLICIT NONE
      real E0,bt
      integer np
      real E(np)
      real EranIe
      integer i

      do i=1,np
         E(i) = EranIe(E0,0.,bt)
      enddo
      END

*                                         @METAGS .Ie
*                                         12-15-98 02:27pm
*--------------- Ie ---------------
*
      real function Ie(E0,E,bt)
*     .. (A.3) from Mo & Tsai
      parameter (eps=1e-5)
      Emax = (1.-eps)*E0
      Emin = .05*E0
      if (E.GT.Emin) then
*        .. correction due to the multiple photon emission
         Cmult = (log(E0/E))**bt
      else
*        .. the complete screening formula is unreliable
         Cmult = 1.
      endif
      if (E .LE. Emax) then
         Ie = bt/(E0-E) * ( (E/E0) + (3./4.)*((E0-E)/E0)**2 )*Cmult
      else
         Ie = bt/(E0-Emax)*((Emax/E0) + (3./4.)*((E0-Emax)/E0)**2)*Cmult
*         Ie = 1e10
      endif
      END

*                                         @METAGS .EranIe
*                                         12-17-98 05:32pm
*--------------- EranIe ---------------
*
      real function EranIe(E0,Emin,bt)
*
*  Generates random energy with respect to Ie in range (Emin,E0-delta)
*  Uses generalized Von Neumann acceptance-rejection method:
*  Distribution density for Ie p(E)=C*Ie is represented as
*  p(E) = p1(E)*f(E), where p1(E) is auxiliary distribution density.
*  Here p1(E)=C1*(E0-Emin)*Ie(Emin)/(E0-E)
*  C,C1 are normalizing constants.
*  Function (E0-Emin)*Ie(Emin)/(E0-E) = Ie(E0,E,bt) at E=Emin
*  f(E) has maximum C/C1 at E=Emin
*  Random Etry for p1 is generated using inverted functions method.
*  Condition to accept Etry is f(Etry) > (C/C1)*r2,
*  where r2 is uniformly distributed in (0,1).
*  To simplicity we use modified function f1(E)=(C/C1)*f(E).
*  Condition with f1 is modified to f1(Etry) > r2
*  The actual selection efficiency is about 98%
*  Uses RNDM as a random generator
*
      IMPLICIT NONE
      real E0,Emin,bt
      real Ie, RNDM
      real eps,delta,dE,r1,r2,f1,Etry
      parameter (eps=1.E-6)
*      parameter (eps=1.E-3)

      delta = eps*E0

      if (E0-Emin .LT. delta) then
         EranIe = E0-delta
         RETURN
      endif
      
      dE = E0-Emin
  100 continue
      r1 = RNDM(r1)
*     .. random energy with respect to (E0-Emin)*Ie(E0,Emin,bt)/(E0-E)
      Etry = E0 - dE*(delta/dE)**r1
      r2 = RNDM(r2)
      f1 = (E0-Etry)/dE * Ie(E0,Etry,bt)/Ie(E0,Emin,bt)
      if (f1 .GT. r2) then
*        .. Success: Etry is distributed with respect to Ie
         EranIe = Etry
      else
*        .. generate new pair Etry,r2
         goto 100
      endif
      END
QUIT
RETURN
