*                                         @METAGS D2FITFOR
*--------------- D2FITFOR ---------------
*
MACRO D2FITFOR
D2FOR=''; g/imp D2FOR; if [D2FOR]='' then; exec D2FOR; endif

g/cr D2FITFOR $WORD([0],1,1,#)

*--------------------------------@METAGS IFILL.COMIS
APPL COMIS QUIT
      INTEGER FUNCTION IFILL(id,Emin,Emax,E,S,dE,dS)
*
*     Fill E,S,dE,dS start from index that have been defened
*     by routine that performs call, e.g.
*     CALL IFILL(100,100.,200.,E(10),S(10),dE(10),dS(10)) fills from 10th el.
*     Return the number of values have been filled
*
      character*80 chtitl
      parameter (MAXCH=96)
      real E(MAXCH),S(MAXCH),dE(MAXCH),dS(MAXCH)
      real X(MAXCH),Y(MAXCH),dX(MAXCH),dY(MAXCH)
      IFILL = 0
      call HGIVE(id,chtitl,NX,XMI,XMA,NY,YMI,YMA,NWT,LOC)
      if (XMI.GT.Emax) RETURN
      if (XMA.LT.Emin) RETURN
      call HREBIN(id,X,Y,dX,dY,NX,1,NX)
      call HXI(id,Emin,n1)
      if (n1.LT.1) n1=1
      call HXI(id,Emax,n2)
      if (n2.GT.NX) n2=NX
      i = 0
      do n=n1,n2
         i = i+1
         E(i)  =  X(n)
         S(i)  =  Y(n)
         dE(i) = dX(n)
         dS(i) = dY(n)
      enddo
      IFILL = i
      END

      INTEGER FUNCTION IFILL0(id,Emin,Emax,E,S,dS)
*
*     Fill E,S,dS start from index that have been defened
*     by routine that performs call, e.g.
*     CALL IFILL(100,100.,200.,E(10),S(10),dS(10)) fills from 10th element
*     Return the number of values have been filled
*
      character*80 chtitl
      parameter (MAXCH=96)
      real E(MAXCH),S(MAXCH),dS(MAXCH)
      real X(MAXCH),Y(MAXCH),dX(MAXCH),dY(MAXCH)
      IFILL0 = 0
      call HGIVE(id,chtitl,NX,XMI,XMA,NY,YMI,YMA,NWT,LOC)
      if (XMI.GT.Emax) RETURN
      if (XMA.LT.Emin) RETURN
      call HREBIN(id,X,Y,dX,dY,NX,1,NX)
      call HXI(id,Emin,n1)
      if (n1.LT.1) n1=1
      call HXI(id,Emax,n2)
      if (n2.GT.NX) n2=NX
      i = 0
      do n=n1,n2
         i = i+1
         E(i)  =  X(n)
         S(i)  =  Y(n)
         dS(i) = dY(n)
      enddo
      IFILL0 = i
      END

*                                         @METAGS FITsave
*--------------- FITsave ---------------
*
      subroutine FITsave(outfile,comm1,comm2,comm3)
      character*(*) outfile, comm1,comm2,comm3
      character*127 comment
*      character*32  fname,file
*      call FPARSE(outfile,fname,file,'for')
      call KUIP2STR(comm1,comm2,comm3,comment)
*      call FUNCOP('fitdef.for',file,comment)
      call FUNCOP('fitdef.for',outfile,comment)
      RETURN
      END
QUIT

* create templates because polinom fit vectors defened like ppar(*)
if $VEXIST(ppar)   = 0 then; v/cr ppar(100)  ; p=1  ; endif
if $VEXIST(eppar)  = 0 then; v/cr eppar(100) ; ep=1 ; endif
if $VEXIST(eeppar) = 0 then; v/cr eeppar(100); eep=1; endif
if $VEXIST(gppar)  = 0 then; v/cr gppar(100) ; gp=1 ; endif
if $VEXIST(plpar)  = 0 then; v/cr plpar(100) ; pl=1 ; endif

* prevent creating of zero vectors after execution D2FITFOR
if $VEXIST(epar)   = 0 then; e=1  ; endif
if $VEXIST(eepar)  = 0 then; ee=1 ; endif
if $VEXIST(gpar)   = 0 then; g=1  ; endif
if $VEXIST(gepar)  = 0 then; ge=1 ; endif

if $VEXIST(Emin) = 0 then; v/cr Emin; delEmin=1; endif
if $VEXIST(Emax) = 0 then; v/cr Emax; delEmax=1; endif

APPL COMIS QUIT
*                                         @METAGS GenHead
*                                         12-30-97 06:03pm
*--------------- GenHead ---------------
*
      SUBROUTINE GenHead(vpar, npar,file,GenFUN,Emin,Emax)
      real vpar(npar)
      character*32 file, GenFUN
      real Emin,Emax
      character*32 fname,outfile
*
      call FPARSE(file,fname,outfile,'for')
      lename = LENOCC(fname)
      lenGen = LENOCC(GenFUN)
      call FCLEAR(outfile)
      lun = LUNFREE(40)
      open (lun,FILE=outfile, STATUS='UNKNOWN',ERR=10000)

      write (lun,90)
   90 format('*     .. Autogenerated function')
*     .. FUNCTION statement
      write(lun,10) fname(1:lename)
*     .. IDtype, Emin,Emax
      write(lun,20) GenFUN(1:lenGen), Emin,Emax
*     .. array declaration
      write(lun,30) npar
*     .. DATA statement
      write(lun,40)
      do i=1, npar-1
*         print 50, vpar(i)
         write(lun,50) vpar(i)
      enddo
*     .. last parameter. End of DATA statement
      write(lun,60) vpar(npar)
      RETURN
   10 format(6X,'REAL FUNCTION ', A,'(x)')
   20 format(
     &   '*TYPE', T7, 'Fit function ', A /
     &   '*EMIN', T9,F8.3                /
     &   '*EMAX', T9,F8.3                )
   30 format(6X, 'real PAR(',I2,')')
   40 format(6X, 'data PAR/')
   50 format(5X,'# ', G13.7, T25, ',')
   60 format(5X,'# ', G13.7, T25, '/')
      RETURN
10000 print*, 'Could not open file ', outfile
      STOP
      END
*                                         @METAGS GenEND
*                                         12-30-97 01:24am
*--------------- GenEND ---------------
*
      SUBROUTINE GenEND(resvar,file)
      character*32 file,resvar
      character*32 fun,outfile,upfun

*     .. get lun opened for file
      call FPARSE(file,fun,outfile,'for')
      lun = LUNFILE(outfile)
      lenfun = LENOCC(fun)
      lenres = LENOCC(resvar)
*     .. assigning to function identifier and END statement
      write(lun,80,ERR=10000) fun(1:lenfun), resvar(1:lenres)
   80 format(6X, A, ' = ', A / 6X,'END')
      close(lun)

*     .. test to identifier existance
      ifind = IFINDVAR(outfile,fun)
      if (ifind.NE.1) then
         upfun = fun
         call CLTOU(upfun)
         print 1, upfun(1:lenfun)
    1    format('ERROR GenEND: Name ', A, 
     &          ' is used in code. Try another file name')
*        .. clear file
         call FCLEAR(outfile)
      endif
      RETURN
10000 print*, 'GenEND ERROR: Write error to ', outfile
      close(lun)
      END
*                                         @METAGS GenPOLI
*--------------- GenPOLI ---------------
*
      SUBROUTINE GenPOLI(file)
      character*32 file
      character*32 ffile,GenFUN,resvar
      vector ppar(*), Emin(1),Emax(1)
      GenFUN = 'POLI'
      npar = 1 + INT(ppar(1))+1
*     .. header of function "file", parameters, comment, ets.
      call GenHead(ppar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code
      write(lun,70)
   70 format(
     &   6X, 'ipower = PAR(1)                      '/
     &   6X, 'p = 0.                               '/
     &   '*     .. the last non-polinom parameter  '/
     &   6X, 'last = 1                             '/
     &   6X, 'do n=1, ipower+1                     '/
     &   6X, '   p = p + PAR(last+n)*x**(n-1)      '/
     &   6X, 'enddo                                '/
     &   6X, 'result = p                           '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file,lun)
      END
*                                         @METAGS GenEX
*--------------- GenEX ---------------
*
      SUBROUTINE GenEX(file)
      character*32 file
      character*32 ffile,GenFUN, resvar
      vector epar(3), Emin(1),Emax(1)
      GenFUN = 'EX'
      npar = 1 + 2
*     .. header of function "file", parameters, comment, ets.
      call GenHead(epar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code
      write(lun,70)
   70 format(
     &   6X, 'idummy = PAR(1)                      '/
     &   6X, 'e = 0.                               '/
     &   6X, 'arg = PAR(2) + x*PAR(3)              '/
     &   6X, 'if (ABS(arg) .LT. 50.) e=exp(arg)    '/
     &   6X, 'result = e                           '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file)
      END
*                                         @METAGS GenEP
*--------------- GenEP ---------------
*
      SUBROUTINE GenEP(file)
      character*32 file
      character*32 ffile,GenFUN, resvar
      vector eppar(*), Emin(1),Emax(1)
      GenFUN = 'EP'
      npar = 1 + 2 + INT(eppar(1))+1
*     .. header of function "file", parameters, comment, ets.
      call GenHead(eppar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code (FORMAT must be < 512 characters)
      write(lun,70)
      write(lun,80)
   70 format(
     &   6X, 'ipower = PAR(1)                      '/
     &   6X, 'e = 0.                               '/
     &   6X, 'arg = PAR(2) + x*PAR(3)              '/
     &   6X, 'if (ABS(arg) .LT. 50.) e=exp(arg)    '/
     &   6X)
   80 format(
     &   6X, 'p = 0.                               '/
     &   '*     .. the last non-polinom parameter  '/
     &   6X, 'last = 1 + 2                         '/
     &   6X, 'do n=1, ipower+1                     '/
     &   6X, '   p = p + PAR(last+n)*x**(n-1)      '/
     &   6X, 'enddo                                '/
     &   6X, 'result = e+p                         '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file)
      END
*                                         @METAGS GenEE
*--------------- GenEE ---------------
*
      SUBROUTINE GenEE(file)
      character*32 file
      character*32 ffile,GenFUN, resvar
      vector eepar(5), Emin(1),Emax(1)
      GenFUN = 'EE'
      npar = 1 + 4
*     .. header of function "file", parameters, comment, ets.
      call GenHead(eepar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code
      write(lun,70)
   70 format(
     &   6X, 'idummy = PAR(1)                      '/
     &   6X, 'e1 = 0.                              '/
     &   6X, 'arg = PAR(2) + x*PAR(3)              '/
     &   6X, 'if (ABS(arg) .LT. 50.) e1=exp(arg)   '/
     &   6X, 'e2 = 0.                              '/
     &   6X, 'arg = PAR(4) + x*PAR(5)              '/
     &   6X, 'if (ABS(arg) .LT. 50.) e2=exp(arg)   '/
     &   6X, 'result = e1+e2                       '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file)
      END
*                                         @METAGS GenEEP
*--------------- GenEEP ---------------
*
      SUBROUTINE GenEEP(file)
      character*32 file
      character*32 ffile,GenFUN, resvar
      vector eeppar(*), Emin(1),Emax(1)
      GenFUN = 'EEP'
      npar = 1 + 4 + INT(eeppar(1))+1
*     .. header of function "file", parameters, comment, ets.
      call GenHead(eeppar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code (FORMAT must be < 512 characters)
      write(lun,70)
      write(lun,80)
   70 format(
     &   6X, 'ipower = PAR(1)                      '/
     &   6X, 'e1 = 0.                              '/
     &   6X, 'arg = PAR(2) + x*PAR(3)              '/
     &   6X, 'if (ABS(arg).LT.50.) e1=exp(arg)     '/
     &   6X, 'e2 = 0.                              '/
     &   6X, 'arg = PAR(4) + x*PAR(5)              '/
     &   6X, 'if (ABS(arg).LT.50.) e2=exp(arg)     '/
     &   6X)
   80 format(
     &   6X, 'p = 0.                               '/
     &   '*     .. the last non-polinom parameter  '/
     &   6X, 'last = 1 + 4                         '/
     &   6X, 'do n=1, ipower+1                     '/
     &   6X, '   p = p + PAR(last+n)*x**(n-1)      '/
     &   6X, 'enddo                                '/
     &   6X, 'result = e1+e2+p                     '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file)
      END
*                                         @METAGS GenGAUSS
*--------------- GenGAUSS ---------------
*
      SUBROUTINE GenGAUSS(file)
      character*32 file
      character*32 ffile,GenFUN, resvar
      vector gpar(4), Emin(1),Emax(1)
      GenFUN = 'GAUSS'
      npar = 1 + 3
*     .. header of function "file", parameters, comment, ets.
      call GenHead(gpar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code
      write(lun,70)
   70 format(
     &   6X, 'idummy = PAR(1)                      '/
     &   6X, 'g = 0.                               '/
     &   6X, 'arg = -0.5*( (x-PAR(3))/PAR(4) )**2  '/
     &   6X, 'if(ABS(arg).LT.50.)g=PAR(2)*exp(arg) '/
     &   6X, 'result = g                           '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file)
      END
*                                         @METAGS GenGE
*--------------- GenGE ---------------
*
      SUBROUTINE GenGE(file)
      character*32 file
      character*32 ffile,GenFUN, resvar
      vector gepar(6), Emin(1),Emax(1)
      GenFUN = 'GAUSS'
      npar = 1 + 3 + 2
*     .. header of function "file", parameters, comment, ets.
      call GenHead(gepar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code
      write(lun,70)
   70 format(
     &   6X, 'idummy = PAR(1)                      '/
     &   6X, 'g = 0.                               '/
     &   6X, 'arg = -0.5*( (x-PAR(3))/PAR(4) )**2  '/
     &   6X, 'if(ABS(arg).LT.50.)g=PAR(2)*exp(arg) '/
     &   6X, 'e = 0.                               '/
     &   6X, 'arg = PAR(5) + x*PAR(6)              '/
     &   6X, 'if (ABS(arg).LT.50.) e=exp(arg)      '/
     &   6X, 'result = g+e                         '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file)
      END
*                                         @METAGS GenGP
*--------------- GenGP ---------------
*
      SUBROUTINE GenGP(file)
      character*32 file
      character*32 ffile,GenFUN, resvar
      vector gppar(*), Emin(1),Emax(1)
      GenFUN = 'GP'
      npar = 1 + 3 + INT(gppar(1))+1
*     .. header of function "file", parameters, comment, ets.
      call GenHead(gppar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code (FORMAT must be < 512 characters)
      write(lun,70)
      write(lun,80)
   70 format(
     &   6X, 'ipower = PAR(1)                      '/
     &   6X, 'g = 0.                               '/
     &   6X, 'arg = -0.5*( (x-PAR(3))/PAR(4) )**2  '/
     &   6X, 'if(ABS(arg).LT.50.)g=PAR(2)*exp(arg) '/
     &   6X)
   80 format(
     &   6X, 'p = 0.                               '/
     &   '*     .. the last non-polinom parameter  '/
     &   6X, 'last = 1 + 3                         '/
     &   6X, 'do n=1, ipower+1                     '/
     &   6X, '   p = p + PAR(last+n)*x**(n-1)      '/
     &   6X, 'enddo                                '/
     &   6X, 'result = g+p                         '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file)
      END
*                                         @METAGS GenPL
*--------------- GenPL ---------------
*
      SUBROUTINE GenPL(file)
      character*32 file
      character*32 ffile,GenFUN, resvar
      vector plpar(*), Emin(1),Emax(1)
      GenFUN = 'PL'
      npar = 1 + INT(plpar(1))+1
*     .. header of function "file", parameters, comment, ets.
      call GenHead(plpar, npar,file,GenFUN,Emin(1),Emax(1))
*     .. get lun opened by GenHead for file
      call FPARSE(file,ffile,ffile,'for')
      lun = LUNFILE(ffile)
*     .. code
      write(lun,70)
   70 format(
     &   6X, 'ipower = PAR(1)                      '/
     &   6X, 'p = 0.                               '/
     &   '*     .. the last non-polinom parameter  '/
     &   6X, 'last = 1                             '/
     &   6X, 'do n=1, ipower+1                     '/
     &   6X, '   p = p + PAR(last+n)*x**(n-1)      '/
     &   6X, 'enddo                                '/
     &   6X, 'e = 0                                '/
     &   6X, 'if (ABS(p).LT.50.) e=exp(p)          '/
     &   6X, 'result = e                           '/
     &   6X)
      resvar = 'result'
*     .. assign "resvar" to "file", END statement and close the file
      call GenEND(resvar,file)
      END
QUIT
* delete vector templates
if [p]   = 1 then; v/de ppar  ; endif
if [ep]  = 1 then; v/de eppar ; endif
if [eep] = 1 then; v/de eeppar; endif
if [gp]  = 1 then; v/de gppar ; endif
if [pl]  = 1 then; v/de plpar ; endif
* delete zero vectors
if [e]   = 1 then; v/de epar  ; endif
if [ee]  = 1 then; v/de eepar ; endif
if [g]   = 1 then; v/de gpar  ; endif
if [ge]  = 1 then; v/de gepar ; endif

if [delEmin] = 1 then; v/de Emin; endif
if [delEmax] = 1 then; v/de Emax; endif

*                                         @METAGS SOUT
*--------------- SOUT ---------------
*
if $VEXIST(energy)=0 then; venergy='KILL'; endif
if $VEXIST(energy)=0 then; vcrosec='KILL'; endif
APPL COMIS QUIT
*
* --- SOUT: function for SIM package ---
*
      function SOUT(E)
      parameter (MAX=1000)
      vector energy(MAX),crosec(MAX)

      Emin = energy(1)
      Edelta = energy(2)-energy(1)

      i = INT(.5 + (E-Emin)/Edelta)
      if (i.LT.1) then
         print*, 'Energy E=', E, ' underflows the vector ENERGY'
         SOUT = crosec(1)
         RETURN
      endif
      if (i.GE.MAX) then
         print*, 'Energy E=', E, ' overflows the vector ENERGY'
         SOUT = crosec(MAX)
         RETURN
      endif

*     .. Linear approximation
      E1 = energy(i)
      s1 = crosec(i)
      E2 = energy(i+1)
      s2 = crosec(i+1)
      SOUT = s1 + (s2-s1)*(E-E1)/(E2-E1)
      END
QUIT
if [venergy] = 'KILL' then; v/de energy; endif
if [vcrosec] = 'KILL' then; v/de crosec; endif
RETURN
